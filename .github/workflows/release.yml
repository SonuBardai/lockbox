name: Build and Release

on:
  push:
    # branches:
    #   - main
    # paths:
    #   - "Cargo.toml"

jobs:
  check_version:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          VERSION_CHANGED=$(git diff HEAD^ HEAD -- Cargo.toml | grep '^+version' | wc -l)
          echo "::set-output name=version_changed::$VERSION_CHANGED"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check_version
    # if: needs.check_version.outputs.version_changed == '1'
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload release binary
        uses: actions/upload-artifact@v2
        with:
          name: lockbox-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lockbox*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - check_version
      - build
    # if: needs.check_version.outputs.version_changed == '1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "::set-output name=version::$VERSION"

      - name: Download Artifacts
        uses: dawidd6/action-download-artifact@v2.14.0
        with:
          workflow: ${{ github.workflow }}.yml
          workflow_conclusion: success
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: <(echo "Release of version ${{ steps.version.outputs.version }}")
          draft: false

      - name: Upload Artifacts
        run: |
          for file in artifacts/*; do 
              echo "Uploading ${file}"
              curl \
                  --progress-bar \
                  --header "Authorization : token ${{ secrets.GITHUB_TOKEN }}" \
                  --header "Content-Type : $(file --mime-type ${file})" \
                  --data-binary @${file} \
                  "${{ steps.create_release.outputs.upload_url }}?name=$(basename ${file})"
          done
